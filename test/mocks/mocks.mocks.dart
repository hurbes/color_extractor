// Mocks generated by Mockito 5.4.4 from annotations
// in color_extractor/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:isolate' as _i3;
import 'dart:typed_data' as _i11;
import 'dart:ui' as _i9;

import 'package:color_extractor/src/interfaces/i_color_processor.dart' as _i5;
import 'package:color_extractor/src/interfaces/i_image_converter.dart' as _i8;
import 'package:color_extractor/src/interfaces/i_isolate_manager.dart' as _i7;
import 'package:color_extractor/src/interfaces/i_native_bridge.dart' as _i6;
import 'package:color_extractor/src/interfaces/image_source.dart' as _i10;
import 'package:color_extractor/src/models.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImageData_0 extends _i1.SmartFake implements _i2.ImageData {
  _FakeImageData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSendPort_1 extends _i1.SmartFake implements _i3.SendPort {
  _FakeSendPort_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_2<T> extends _i1.SmartFake
    implements _i4.StreamSubscription<T> {
  _FakeStreamSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_3<T> extends _i1.SmartFake implements _i4.Future<T> {
  _FakeFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IColorProcessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockIColorProcessor extends _i1.Mock implements _i5.IColorProcessor {
  MockIColorProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize({
    required _i6.INativeBridge? nativeBridge,
    required _i7.IIsolateManager? isolateManager,
    required _i8.IImageConverter? imageConverter,
    bool? enableDebugLogs = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #nativeBridge: nativeBridge,
            #isolateManager: isolateManager,
            #imageConverter: imageConverter,
            #enableDebugLogs: enableDebugLogs,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.Color>> getDominantColors({
    required _i10.ImageSource? image,
    int? numColors,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDominantColors,
          [],
          {
            #image: image,
            #numColors: numColors,
          },
        ),
        returnValue: _i4.Future<List<_i9.Color>>.value(<_i9.Color>[]),
      ) as _i4.Future<List<_i9.Color>>);

  @override
  void processImage(List<dynamic>? message) => super.noSuchMethod(
        Invocation.method(
          #processImage,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i9.Color> extractDominantColors(
    _i10.ImageSource? imageSource,
    int? numColors,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractDominantColors,
          [
            imageSource,
            numColors,
          ],
        ),
        returnValue: <_i9.Color>[],
      ) as List<_i9.Color>);
}

/// A class which mocks [IImageConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockIImageConverter extends _i1.Mock implements _i8.IImageConverter {
  MockIImageConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get enableDebugLogs => (super.noSuchMethod(
        Invocation.getter(#enableDebugLogs),
        returnValue: false,
      ) as bool);

  @override
  _i2.ImageData convertToRgb(_i10.ImageSource? imageSource) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertToRgb,
          [imageSource],
        ),
        returnValue: _FakeImageData_0(
          this,
          Invocation.method(
            #convertToRgb,
            [imageSource],
          ),
        ),
      ) as _i2.ImageData);

  @override
  _i11.Uint8List convertYuv420ToRgb(_i2.KYuv420Data? yuv420) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertYuv420ToRgb,
          [yuv420],
        ),
        returnValue: _i11.Uint8List(0),
      ) as _i11.Uint8List);

  @override
  _i11.Uint8List convertBgra8888ToRgb(_i11.Uint8List? bgra) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertBgra8888ToRgb,
          [bgra],
        ),
        returnValue: _i11.Uint8List(0),
      ) as _i11.Uint8List);

  @override
  _i11.Uint8List convertNv21ToRgb(
    _i11.Uint8List? nv21,
    int? width,
    int? height,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertNv21ToRgb,
          [
            nv21,
            width,
            height,
          ],
        ),
        returnValue: _i11.Uint8List(0),
      ) as _i11.Uint8List);
}

/// A class which mocks [IIsolateManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIIsolateManager extends _i1.Mock implements _i7.IIsolateManager {
  MockIIsolateManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get enableDebugLogs => (super.noSuchMethod(
        Invocation.getter(#enableDebugLogs),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize(void Function(List<dynamic>)? processFunction) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [processFunction],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendMessage(List<dynamic>? message) => (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [INativeBridge].
///
/// See the documentation for Mockito's code generation for more information.
class MockINativeBridge extends _i1.Mock implements _i6.INativeBridge {
  MockINativeBridge() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get enableDebugLogs => (super.noSuchMethod(
        Invocation.getter(#enableDebugLogs),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i9.Color> extractDominantColors(
    _i2.ImageData? imageData,
    int? numColors,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractDominantColors,
          [
            imageData,
            numColors,
          ],
        ),
        returnValue: <_i9.Color>[],
      ) as List<_i9.Color>);
}

/// A class which mocks [ImageSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageSource extends _i1.Mock implements _i10.ImageSource {
  MockImageSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
      ) as int);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
      ) as int);

  @override
  _i11.Uint8List getRawData() => (super.noSuchMethod(
        Invocation.method(
          #getRawData,
          [],
        ),
        returnValue: _i11.Uint8List(0),
      ) as _i11.Uint8List);

  @override
  _i10.ImageFormat getFormat() => (super.noSuchMethod(
        Invocation.method(
          #getFormat,
          [],
        ),
        returnValue: _i10.ImageFormat.nv21,
      ) as _i10.ImageFormat);
}

/// A class which mocks [ReceivePort].
///
/// See the documentation for Mockito's code generation for more information.
class MockReceivePort extends _i1.Mock implements _i3.ReceivePort {
  MockReceivePort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SendPort get sendPort => (super.noSuchMethod(
        Invocation.getter(#sendPort),
        returnValue: _FakeSendPort_1(
          this,
          Invocation.getter(#sendPort),
        ),
      ) as _i3.SendPort);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<dynamic> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.StreamSubscription<dynamic> listen(
    void Function(dynamic)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_2<dynamic>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i4.StreamSubscription<dynamic>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<dynamic> asBroadcastStream({
    void Function(_i4.StreamSubscription<dynamic>)? onListen,
    void Function(_i4.StreamSubscription<dynamic>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<dynamic> where(bool Function(dynamic)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<S> map<S>(S Function(dynamic)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i4.Stream<S>.empty(),
      ) as _i4.Stream<S>);

  @override
  _i4.Stream<E> asyncMap<E>(_i4.FutureOr<E> Function(dynamic)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i4.Stream<E>.empty(),
      ) as _i4.Stream<E>);

  @override
  _i4.Stream<E> asyncExpand<E>(_i4.Stream<E>? Function(dynamic)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i4.Stream<E>.empty(),
      ) as _i4.Stream<E>);

  @override
  _i4.Stream<dynamic> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<S> expand<S>(Iterable<S> Function(dynamic)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i4.Stream<S>.empty(),
      ) as _i4.Stream<S>);

  @override
  _i4.Future<dynamic> pipe(_i4.StreamConsumer<dynamic>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Stream<S> transform<S>(
          _i4.StreamTransformer<dynamic, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i4.Stream<S>.empty(),
      ) as _i4.Stream<S>);

  @override
  _i4.Future<dynamic> reduce(
          dynamic Function(
            dynamic,
            dynamic,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      dynamic,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i4.Future<S>.value(v),
            ) ??
            _FakeFuture_3<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i4.Future<S>);

  @override
  _i4.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> forEach(void Function(dynamic)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> every(bool Function(dynamic)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> any(bool Function(dynamic)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i4.Stream<R>.empty(),
      ) as _i4.Stream<R>);

  @override
  _i4.Future<List<dynamic>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i4.Future<List<dynamic>>);

  @override
  _i4.Future<Set<dynamic>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i4.Future<Set<dynamic>>.value(<dynamic>{}),
      ) as _i4.Future<Set<dynamic>>);

  @override
  _i4.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i4.Future<E>.value(v),
            ) ??
            _FakeFuture_3<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i4.Future<E>);

  @override
  _i4.Stream<dynamic> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<dynamic> takeWhile(bool Function(dynamic)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<dynamic> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<dynamic> skipWhile(bool Function(dynamic)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<dynamic> distinct(
          [bool Function(
            dynamic,
            dynamic,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Future<dynamic> firstWhere(
    bool Function(dynamic)? test, {
    dynamic Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> lastWhere(
    bool Function(dynamic)? test, {
    dynamic Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> singleWhere(
    bool Function(dynamic)? test, {
    dynamic Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Stream<dynamic> timeout(
    Duration? timeLimit, {
    void Function(_i4.EventSink<dynamic>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);
}

/// A class which mocks [SendPort].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendPort extends _i1.Mock implements _i3.SendPort {
  MockSendPort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void send(Object? message) => super.noSuchMethod(
        Invocation.method(
          #send,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
